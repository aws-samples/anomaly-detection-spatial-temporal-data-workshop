"""
This is a boilerplate pipeline 'taddy'
generated using Kedro 0.18.0
"""
import pandas as pd 
import numpy as np 
import os
import logging
from typing import Dict, Tuple
import torch

from anomaly_detection_spatial_temporal_data.model.data_loader import DynamicDatasetLoader
from anomaly_detection_spatial_temporal_data.model.dynamic_graph import Taddy
from anomaly_detection_spatial_temporal_data.model.model_config import TaddyConfig


def load_data(processed_data, parameters: Dict) -> Dict:
    """
    Load the processed data for the model 
    Args:
        processed_data: processed graph data 
        parameters: parameters for the data loader
        
    Returns: 
        data dict generated by TADDY data loader 
    """
    data_loader = DynamicDatasetLoader(processed_data, parameters)
    return data_loader.load()

def set_and_train_model(data_dict: Dict, parameters: Dict) -> Tuple:
    """
    Set the model training configurations and train the model 
    Args:
        data_dict: data for the dataloader
        parameters: parameters for model training 
    Returns:
        model training result
    """
    model_config = TaddyConfig(parameters)
    model_obj = Taddy(data_dict, model_config)
    learned_result,save_model_path = model_obj.run()
    return learned_result,save_model_path

def predict(model_path: str, parameters: Dict) -> np.ndarray:
    """
    Run inference on specific snapshot number 
    Args:
        model_path: saved model path 
        parameters: parameters for running the inference 
    Returns: 
        model inference result as numpy arrays
    """
    logger = logging.getLogger(__name__)
    logger.info(f"Loading model {model_path}")
    model_obj = torch.load(model_path)
    pred = model_obj.predict(parameters['snap_num'])
    
    return pred
    